#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/sched.h>
#include <time.h>

long double runTest(int bufferSize);

int main(int argc, char** argv){

        if(argc != 2){
                printf("Warning: run as <executable> <number>");
                exit(1);
        }

        printf("Loading test module...\n");

        int testTime = 1;
        long double sum = 0.0;

        for(int i = 0; i < testTime; i++){
                sum += runTest(atoi(argv[1]));
        }

        printf("the final throughput is %LF\n", sum / testTime);
        return 0;
}

long double runTest(int bufferSize){
        struct timespec end, start;
        int testingTime = 100;
        int pipefd[2];
        int pipebk[2];
        pid_t cpid;
        char buffer[bufferSize];
        memset (buffer, 0, sizeof(buffer));
        char buf[bufferSize];
        char back = '1';
        char backBuf;
        int totalCount = 0;
        int readCount = 0;
        int writeCount = 0;

        if (pipe(pipefd) == -1) {
                perror("pipe");
                exit(EXIT_FAILURE);
        }
        
        if(pipe(pipebk) == -1) {
                perror("pipe");
                exit(EXIT_FAILURE);
        }

        cpid = fork();
        if (cpid == -1) {
                perror("fork");
                exit(EXIT_FAILURE);
        }

        if (cpid == 0) {
                close(pipefd[1]);
                close(pipebk[0]);


                for(int i = 0; i < testingTime; i++){

                        readCount = 0;
                        writeCount = 0;
                do {
                        readCount = read(pipefd[0], buf + totalCount, bufferSize - totalCount);
                        totalCount += readCount;
                } while(totalCount > 0 && totalCount < bufferSize);

                printf("child read %d for %d times\n", totalCount, i);
                }
                do {
                        writeCount = write(pipebk[1], &back, 1);
                        if(writeCount > 1){
                                fprintf(stderr, "Error write out one byte");
                                exit(1);
                        }
                } while(writeCount != 1);

                printf("child read %d\n", writeCount);

                close(pipefd[0]);
                close(pipebk[1]);

                exit(EXIT_SUCCESS);

        } else {
                close(pipefd[0]);
                close(pipebk[1]);


                clock_gettime(CLOCK_REALTIME, &start);

                readCount = 0;
                writeCount = 0;

                for (int i = 0; i < testingTime; i++) {

                        do {
                                writeCount = write(pipefd[1], buffer + totalCount, bufferSize - totalCount);
                                totalCount += writeCount;
                        } while(totalCount > 0 && totalCount < bufferSize);

                        printf("Parent wirte %d for %d times\n", totalCount, i);
                }

                readCount = 0;
                do {
                       readCount = read(pipebk[0], &backBuf, 1);
                                if(readCount > 1){
                                        fprintf(stderr, "Error read in one byte");
                                        exit(1);
                                }
                        } while(readCount != 1);

                printf("parent read %d\n", readCount);
                clock_gettime(CLOCK_REALTIME, &end);


                wait(NULL);

                close(pipefd[1]);
                close(pipebk[0]);

       }

        long double temp = (long double) bufferSize * (testingTime + 1.0) * 1000000000 / ((end.tv_nsec - start.tv_nsec) * 1024 * 1024);

          printf("the throughput is %LF MB/s\n", temp);

        return temp;

}
